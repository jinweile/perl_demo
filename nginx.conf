
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #proxy
    upstream group1 {
        server 192.168.4.198:80;
        server 192.168.4.199:80;
    }

    #add perl module
    #perl_modules  perl/lib;
    #perl_require  fastdfs.pm;
    perl_set $realurl '
    use Data::Dumper;
    use DBI;
    use DBD::Sybase;
    use Cache::Memcached;

    sub {
        my @pic_wid = (0,140,174,320,383,640,800);
        my @user_pic_wid = (0,140);
        my @sys_pic_wid = (0,140);
        my @memcached_servers = ("localhost:11211");
        my $database="ComBeziPic";
        my $dsn = "dbi:Sybase:server=fastdfs;database=$database";
        my $user="writeuser";
        my $auth="write\@520";
        my $r = shift;
        my $url = $r->uri;
        if($url =~ /^(\/[a-z]{1}\/[a-z]{1}\/)\d{2}\/\d{2}\/\d{2}\/(\d{20})\-(\d+?)\-(\d+?)\.(jpg|png)$/){
            my $file_path = "";
            my $index = 0;
            my @temp_array;
            if($1 eq "/f/p/") {
                @temp_array = @pic_wid;
            } elsif ($1 eq "/e/u/") {
                @temp_array = @user_pic_wid;
            } elsif($1 eq "/e/s/") {
                @temp_array = @sys_pic_wid;
            }
            my $array_len = @temp_array;
            $array_len = $array_len - 1;
            foreach $wid (@temp_array) {
                if($3 <= $wid){
                    $file_path = "FilePath".$index;
                    last;
                }
                $index++;
            }
            if($file_path eq ""){
                $file_path = "FilePath0";
            }
            my $cached_key = "fastdfs_".$1."_".$2;
            my $cache = Cache::Memcached->new(servers => [@memcached_servers]);
            my $real_url = $cache->get($cached_key);
            if($real_url) {
                return $real_url->{$file_path};
            }
            my $table_name;
            if($1 eq "/f/p/") {
                $table_name = "ProductPic";
            } elsif ($1 eq "/e/u/") {
                $table_name = "UserPic";
            } elsif($1 eq "/e/s/") {
                $table_name = "SystemPic";
            }
            my $sql = "select * from $table_name where PictureFileNo = \'$2\'";
            my $dbh = DBI->connect($dsn, $user, $auth, {RaiseError => 1, AutoCommit => 1}) 
                    || die "Database connection not made: $DBI::errstr";
            my $item = $dbh->selectrow_hashref($sql);
            $dbh->disconnect;
            $cache->set($cached_key, $item, 3600 * 24 * 30);
            $cache->disconnect_all;
            return $item->{$file_path};
        } else {
            return $url;
        }
    }';

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

#        location / {
#            perl   fastdfs::urlhandler;
#            root   html;
#            index  index.html index.htm;
#        }

        #pass
        location / {
            proxy_pass    http://group1$realurl;
            proxy_set_header    Host    $host;
            proxy_set_header    X-Real-IP    $remote_addr;
            proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}