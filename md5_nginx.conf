
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #proxy
    upstream group1 {
        server 192.168.4.198:80;
        server 192.168.4.199:80;
    }

    upstream mshangpin {
        server  192.168.20.78:8080;
    }

    upstream mapi {
        server  192.168.20.81:8083;
    }

    upstream apiv2 {
        server  192.168.20.100:8083;
    }

    #add perl module
    perl_modules  perl/lib;
    perl_require  hash_sort.pm;
    perl_set $realurl '
	use nginx;
	use strict;
	use Digest::MD5 qw(md5_hex);
	use Log::Log4perl;

	#init logger
	Log::Log4perl->init("/log/log4perl.conf");

	sub {
		#init logger
		my $logger = Log::Log4perl->get_logger();

		my $error_json_url = "mapi/404.html";
		my $sp_version = 270;
		my $al_version = 270;
		my $api = "/mapi";
	 	my %url_hash = (
	 		$api."/userbuyinfo" => "",
	 		"/mapi/couponGroup" => "",
	 		"/mapi/activateCoupon" => "",
	 		"/mapi/queryGiftCardStatus" => "",
	 		$api."/orderList" => "",
	 		$api."/orderDetail" => "",
	 		$api."/confirmSettlement" => "",
	 		$api."/updateconfirmorderinfo" => "",
	 		$api."/submitOrder" => "",
	 		$api."/payOrderNew" => "",
	 		$api."/modifyPayOrder" => "",
	 		$api."/getaddr" => "",
	 		$api."/editaddr" => "",
	 		$api."/checkUser" => "",
	 		$api."/sendsmscode" => "",
	 		$api."/verifysmscode" => "",
	 		$api."/setGiftCartPwd" => "",
	 		$api."/cardRecharge" => "",
	 		$api."/apiv2/giftCardRecordList" => "",
	 		$api."/apiv2/giftCardBuy" => "",
	 		$api."/apiv2/giftCardElectronicRecharge" => "",
	 		$api."/apiv2/giftCardRechargePasswd" => "",
	 		$api."/payGiftCardNew" => "",
	 		$api."/buyNow" => "",
	 		$api."/modifyOrderInfo" => ""
	 	);
	 	my $r = shift;
		my $p = $r->header_in("p");
	 	my $ver = $r->header_in("ver");
	 	my $userid = $r->header_in("userid");
	 	my $sign = $r->header_in("sign");
	 	my $current_url = $r->uri;
	 	my $request = $r->args;

		if ($ver eq "") {
			return $error_json_url;
		}

		$logger->debug("p:".$p.",ver:".$ver.",userid:".$userid.",sign:".$sign.",current_url:".$current_url.",request:".$request);

		my $url_head = "";
		if($current_url =~ /^\/(.+?)\/.*?$/){
			$url_head = $1;
		}
		$logger->debug("url_head:".$url_head);

	 	#compare current_url url
	 	if(!exists($url_hash{$current_url})) {
			$logger->debug("!exists:".$current_url);
	 		return $url_head.$current_url."?".$request;
	 	}

		#compare p and ver
		my $version = 0;
		if ($p eq "2") {
			$version = $sp_version;
		} elsif ($p eq "102") {
			$version = $al_version;
		}
		print "version:".$version."\n";
		$ver =~ s/\.//g;
		$logger->debug("version:".$version.",ver:".$ver);
		if ($ver < $version) {
			$logger->debug("ver < version");
			return $url_head.$current_url."?".$request;
		}
		$logger->debug("version < ver");

		my @querys = split(/&/, $request);
		my %query_hash;
		foreach my $query (@querys) {
			my @key_value = split(/=/, $query);
			$query_hash{$key_value[0]} = $key_value[1] && length($key_value[1])  > 0 ? $key_value[1] : "";
		}

		my $request_sort = "";
		my $i = 0;
		my @sort_values = sort(keys %query_hash);
		foreach my $key (@sort_values) {
			if ($i != 0) {
				$request_sort .= "&";
			}
			my $value = $query_hash{$key};
			$request_sort .= $key."=".$value;
			$i++;
		}
		$request_sort .= "&signKey=".$userid;

		$logger->debug("md5 url : ".$request_sort);
		my $md5result = md5_hex($request_sort);
		$logger->debug("md5result : ".$md5result);
		if($md5result eq $sign) {
			$logger->debug("sign true : ".$current_url."?".$request);
	 		return $url_head.$current_url."?".$request;
		} else {
			$logger->debug("sign false : ".$current_url."?".$request);
	 		return $error_json_url;
		}
	}';


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #pass
        #location / {
            #proxy_pass    http://group1$realurl;
            #proxy_set_header    Host    $host;
            #proxy_set_header    X-Real-IP    $remote_addr;
            #proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
            #perl  md5::handler;
        #}

        location /mshangpin {
            proxy_pass http://mshangpin;
        }

        #mapi
        location /mapi {
            #perl  md5::handler;
            proxy_pass http://$realurl;
        }

        #apiv2  
        location /mapi/apiv2 {
            proxy_pass http://apiv2;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}